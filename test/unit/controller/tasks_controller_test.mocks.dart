// Mocks generated by Mockito 5.4.5 from annotations
// in todo/test/unit/controller/tasks_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo/data/entity/task.dart' as _i5;
import 'package:todo/data/persistence/task_dao.dart' as _i2;
import 'package:todo/data/repository/task_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskDao_0 extends _i1.SmartFake implements _i2.TaskDao {
  _FakeTaskDao_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskDao get taskDao =>
      (super.noSuchMethod(
            Invocation.getter(#taskDao),
            returnValue: _FakeTaskDao_0(this, Invocation.getter(#taskDao)),
          )
          as _i2.TaskDao);

  @override
  set taskDao(_i2.TaskDao? _taskDao) => super.noSuchMethod(
    Invocation.setter(#taskDao, _taskDao),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<int> createTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.Task>> loadAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#loadAllTasks, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);
}
