// Mocks generated by Mockito 5.4.5 from annotations
// in todo/test/unit/repository/task_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo/data/entity/task.dart' as _i5;
import 'package:todo/data/persistence/db_service.dart' as _i2;
import 'package:todo/data/persistence/task_dao.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSQLiteDatabaseService_0 extends _i1.SmartFake
    implements _i2.SQLiteDatabaseService {
  _FakeSQLiteDatabaseService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDao extends _i1.Mock implements _i3.TaskDao {
  MockTaskDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SQLiteDatabaseService get databaseService =>
      (super.noSuchMethod(
            Invocation.getter(#databaseService),
            returnValue: _FakeSQLiteDatabaseService_0(
              this,
              Invocation.getter(#databaseService),
            ),
          )
          as _i2.SQLiteDatabaseService);

  @override
  set databaseService(_i2.SQLiteDatabaseService? _databaseService) =>
      super.noSuchMethod(
        Invocation.setter(#databaseService, _databaseService),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<int> create(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#create, [task]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.Task>> readAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#readAllTasks, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<int> markCompleted(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#markCompleted, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> markInProgress(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#markInProgress, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}
